import json

from github import Github, PullRequest
from comment_utils import CommentUtils # Import the new CommentUtils class

class GitHubUtils:
    """
    A utility class for interacting with the GitHub API.
    Encapsulates common operations like getting PR details, posting comments,
    and managing review metadata.
    """

    def __init__(self, github_token: str, repo_name: str, pr_number: int):
        """
        Initializes the GitHubUtils with necessary credentials and PR details.

        Args:
            github_token (str): GitHub Personal Access Token.
            repo_name (str): Full repository name (e.g., 'owner/repo').
            pr_number (int): Pull Request number.
        """
        self.g = Github(github_token)
        self.repo = self.g.get_repo(repo_name)
        self.pr = self.repo.get_pull(pr_number)
        self.comment_utils = CommentUtils() # Initialize CommentUtils
        print(f"GitHubUtils initialized for PR: {repo_name}#{pr_number}")

    def get_pr_details(self) -> PullRequest:
        """
        Returns the GitHub PullRequest object.
        """
        return self.pr

    def is_bot_requested_reviewer(self, bot_user: str) -> bool:
        """
        Checks if the bot has been requested as a reviewer for the PR.

        Args:
            bot_user (str): The GitHub username of the bot.

        Returns:
            bool: True if the bot is a requested reviewer, False otherwise.
        """
        try:
            reviewers, teams = self.pr.get_review_requests()
            requested_reviewers = [r.login for r in reviewers]
            requested_teams = [t.name for t in teams]

            if bot_user in requested_reviewers:
                print(f"Bot '{bot_user}' found in requested reviewers.")
                return True
            if bot_user in requested_teams:
                print(f"Bot team '{bot_user}' found in requested teams.")
                return True
            print(f"Bot '{bot_user}' not requested as reviewer or in requested teams.")
            return False
        except Exception as e:
            print(f"Error checking requested reviewers: {e}")
            return False

    def get_pr_files(self) -> list:
        """
        Retrieves all files changed in the pull request.

        Returns:
            list: A list of File objects from the GitHub API.
        """
        try:
            files = list(self.pr.get_files())
            print(f"Retrieved {len(files)} files from PR.")
            return files
        except Exception as e:
            print(f"Error getting PR files: {e}")
            return []

    def get_cached_reviewed_lines(self) -> dict:
        """
        Retrieves previously reviewed lines from a special metadata comment.
        This helps in tracking what has been reviewed by the bot previously.
        """
        for comment in self.pr.get_issue_comments():
            if comment.body.startswith("<!-- dhp-pr-review-bot-meta"):
                try:
                    meta = json.loads(comment.body.split('\n', 1)[1])
                    print("Loaded cached reviewed lines from metadata comment.")
                    return meta.get("reviewed", {})
                except Exception as e:
                    print(f"Error parsing metadata comment: {e}")
                    continue
        print("No cached reviewed lines found.")
        return {}

    def post_metadata_comment(self, reviewed_lines_dict: dict):
        """
        Posts a metadata comment to track which lines have been reviewed.
        """
        meta = { "reviewed": reviewed_lines_dict }
        body = f"<!-- dhp-pr-review-bot-meta\n{json.dumps(meta, indent=2)}\n-->"
        self.pr.create_issue_comment(body)
        print("Metadata comment posted.")

    def post_pr_review_comments(self, ai_review_json: dict):
        """
        Posts the comprehensive PR review comments generated by the AI.
        This method delegates to CommentUtils.

        Args:
            ai_review_json (dict): The JSON object containing the AI's review.
        """
        self.comment_utils.post_pr_review_comments(self.pr, ai_review_json)

