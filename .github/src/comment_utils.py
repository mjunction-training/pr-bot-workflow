from github import PullRequest

class CommentUtils:
    """
    A utility class for formatting and posting PR review comments to GitHub.
    """

    def __init__(self):
        """
        Initializes the CommentUtils.
        """
        self.text = "CommentUtils"
        print("CommentUtils initialized.")

    def _generate_overall_summary(self, ai_review_json: dict) -> list:
        """
        Generates the PR summary and overall review comments section.
        """
        parts = []
        print(f"Overall {self.text}")
        if ai_review_json.get("pr_summary"):
            parts.append(f"## PR Summary\n{ai_review_json['pr_summary']}")
        if ai_review_json.get("overall_review_comments"):
            parts.append(f"\n## Overall Review Comments\n{ai_review_json['overall_review_comments']}")
        return parts

    def _format_items(self, title: str, items: list) -> list:
        item_parts = []
        print(f"Overall {self.text}")
        if items:
            item_parts.append(f"\n**{title}:**")
            for item in items:
                desc = item.get("description", "N/A")
                example = item.get("example", "No example provided.")
                recommendation = item.get("recommendation", "No recommendation provided.")
                item_parts.append(f"- {desc}\n    Example:\n{example}\n    Recommendation:\n{recommendation}")
        return item_parts

    def _generate_file_review_section(self, file_review: dict) -> list:
        """
        Generates the content for a single file review.
        """
        file_parts = []
        print(f"Overall {self.text}")
        file_path = file_review.get("file_path", "Unknown File")
        file_parts.append(f"\n### File: `{file_path}`")

        if file_review.get("file_summary"):
            file_parts.append(f"**Summary:** {file_review['file_summary']}")

        sec_vulns = file_review.get("security_vulnerabilities", {})
        if any(sec_vulns.values()):
            file_parts.append("\n**Security Vulnerabilities:**")
            for severity in ["high", "medium", "low"]:
                if sec_vulns.get(severity):
                    file_parts.append(f"- **{severity.capitalize()}:**")
                    for vuln in sec_vulns[severity]:
                        desc = vuln.get("description", "N/A")
                        example = vuln.get("example", "No example provided.")
                        recommendation = vuln.get("recommendation", "No recommendation provided.")
                        file_parts.append(f"  - {desc}\n    Example:\n{example}\n    Recommendation:\n{recommendation}")

        file_parts.extend(self._format_items("Other Code Issues", file_review.get("other_code_issues")))
        file_parts.extend(self._format_items("Improvement Suggestions", file_review.get("improvement_suggestions")))

        return file_parts

    def _prepare_line_comments(self, ai_review_json: dict) -> list:
        """
        Prepares line-specific comments for the GitHub API.
        """
        comments_for_github_review = []
        print(f"Overall {self.text}")
        if ai_review_json.get("line_comments"):
            print("Preparing line comments for GitHub review...")
            for comment_data in ai_review_json["line_comments"]:
                file_path = comment_data.get("file_path")
                diff_line_number = comment_data.get("diff_line_number")
                side = comment_data.get("side")
                comment_body = comment_data.get("comment")
                category = comment_data.get("category", "General")

                if file_path and diff_line_number is not None and side and comment_body:
                    comments_for_github_review.append({
                        "path": file_path,
                        "position": diff_line_number,
                        "side": side, # 'LEFT' or 'RIGHT'
                        "body": f"**{category}:** {comment_body}"
                    })
                else:
                    print(f"Skipping malformed line comment: {comment_data}")
        return comments_for_github_review

    def post_pr_review_comments(self, pr: PullRequest, ai_review_json: dict):
        """
        Posts the comprehensive PR review comments generated by the AI.
        This includes an overall review body, per-file consolidated comments,
        and line-specific comments.

        Args:
            pr (PullRequest): The GitHub PullRequest object to post comments to.
            ai_review_json (dict): The JSON object containing the AI's review.
        """
        overall_review_body_parts = self._generate_overall_summary(ai_review_json)

        if ai_review_json.get("file_reviews"):
            overall_review_body_parts.append("\n## File-Specific Reviews")
            for file_review in ai_review_json["file_reviews"]:
                overall_review_body_parts.extend(self._generate_file_review_section(file_review))

        comments_for_github_review = self._prepare_line_comments(ai_review_json)

        # --- Post the Review ---
        full_review_body = "\n".join(overall_review_body_parts)
        if full_review_body.strip() or comments_for_github_review:
            try:
                pr_body_prefix = "ðŸ¤– dhp-pr-review-bot reviewed this PR.\n\n"
                pr.create_review( # Use the passed 'pr' object
                    body=pr_body_prefix + full_review_body,
                    event="COMMENT", # Can be "APPROVE", "REQUEST_CHANGES", "COMMENT"
                    comments=comments_for_github_review
                )
                print("Successfully posted PR review.")
            except Exception as e:
                print(f"Error posting PR review: {e}")
        else:
            print("No review content (overall or line comments) to post from AI. Skipping PR review creation.")

